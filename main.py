#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Excel Print Server
Version: 2.3 - Fixed Printer Selection
"""

from flask import Flask, request, jsonify, send_file
import openpyxl
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.worksheet.page import PageMargins
from openpyxl import Workbook
import os
from datetime import datetime
import tempfile
import sys

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
PRINTERS = {
    8001: "MF270 Series",
    2: "HP LaserJet 1020", 
    3: "Epson L3150",
    4: "Brother HL-1110"
}

def create_excel_file(items, username=None, filial=None, order_id=None, category=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞–∫–∞–∑"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è A4
        ws.page_setup.orientation = ws.ORIENTATION_PORTRAIT
        ws.page_setup.paperSize = ws.PAPERSIZE_A4
        ws.page_setup.fitToPage = True
        ws.page_setup.fitToWidth = 1
        ws.page_setup.fitToHeight = 0  # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ –≤—ã—Å–æ—Ç–µ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π (–≤ –¥—é–π–º–∞—Ö)
        ws.page_margins = PageMargins(
            left=0.2, right=0.2, top=0.2, bottom=0.2,
            header=0.3, footer=0.3
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
        title_font = Font(name='Arial', size=16, bold=True)
        header_font = Font(name='Arial', size=12, bold=True, color='FFFFFF')
        normal_font = Font(name='Arial', size=11)
        total_font = Font(name='Arial', size=12, bold=True)
        info_font = Font(name='Arial', size=12, bold=True)
        
        # –¶–≤–µ—Ç–∞
        header_fill = PatternFill(start_color='4472C4', end_color='4472C4', fill_type='solid')
        total_fill = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
        
        # –ì—Ä–∞–Ω–∏—Ü—ã
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'] = '–°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í: ' + (order_id or 'N/A')
        ws['A1'].font = title_font
        ws['A1'].alignment = Alignment(horizontal='center')
        ws.merge_cells('A1:D1')
        
        row = 3

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if category:
            ws[f'A{row}'] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è:  ' + category
            ws[f'A{row}'].font = info_font
            ws.merge_cells(f'A{row}:C{row}')
            row += 1

        # –ó–∞–∫–∞–∑—á–∏–∫
        if username:
            ws[f'A{row}'] = '–ó–∞–∫–∞–∑—á–∏–∫:  ' + username
            ws[f'A{row}'].font = info_font
            ws.merge_cells(f'A{row}:C{row}')
            row += 1
        
        # –§–∏–ª–∏–∞–ª
        if filial:
            ws[f'A{row}'] = '–§–∏–ª–∏–∞–ª:  ' + filial
            ws[f'A{row}'].font = info_font
            ws.merge_cells(f'A{row}:C{row}')
            row += 1
        
        # –í—Ä–µ–º—è
        ws[f'A{row}'] = '–í—Ä–µ–º—è:   ' + datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ws[f'A{row}'].font = info_font
        ws.merge_cells(f'A{row}:C{row}')
        row += 2
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        ws[f'A{row}'] = '‚Ññ'
        ws[f'B{row}'] = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        ws[f'C{row}'] = '–ï–¥. –∏–∑–º.'
        ws[f'D{row}'] = '–ö–æ–ª-–≤–æ'
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        for col in ['A', 'B', 'C', 'D']:
            cell = ws[f'{col}{row}']
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal='center')
            cell.border = thin_border
        
        row += 1
        start_data_row = row
        
        # –¢–æ–≤–∞—Ä—ã
        total_count = 0
        for i, item in enumerate(items, 1):
            product = item.get('name', item.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            count = item.get('count', 0)
            type_unit = item.get('type', '—à—Ç')
            
            # Double sonlarni string yoki float sifatida saqlash
            try:
                count_value = float(count) if count else 0
            except (ValueError, TypeError):
                count_value = 0
            
            total_count += count_value
            
            ws[f'A{row}'] = i
            ws[f'B{row}'] = product
            ws[f'C{row}'] = type_unit
            ws[f'D{row}'] = count_value  # Float qiymat sifatida
            
            # Stili uchun number format o'rnatish
            ws[f'D{row}'].number_format = '0.00'  # Double sonlar uchun format
            
            # –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            ws[f'A{row}'].font = normal_font
            ws[f'A{row}'].alignment = Alignment(horizontal='center', vertical='center')
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
            ws[f'B{row}'].font = Font(name='Arial', size=13.5, bold=True)
            ws[f'B{row}'].alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
            
            # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            ws[f'C{row}'].font = normal_font
            ws[f'C{row}'].alignment = Alignment(horizontal='center', vertical='center')
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            ws[f'D{row}'].font = normal_font
            ws[f'D{row}'].alignment = Alignment(horizontal='center', vertical='center')
            
            # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            for col in ['A', 'B', 'C', 'D']:
                ws[f'{col}{row}'].border = thin_border

            # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ws.row_dimensions[row].height = 25
            
            row += 1
        
        # –°—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ
        ws[f'A{row}'] = ''
        ws[f'B{row}'] = ''
        ws[f'C{row}'] = '–ò–¢–û–ì–û:'
        ws[f'D{row}'] = total_count
        
        # Number format uchun –ò–¢–û–ì–û uchun ham
        ws[f'D{row}'].number_format = '0.00'
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å—Ç—Ä–æ–∫–∏ –∏—Ç–æ–≥–æ
        ws[f'C{row}'].font = total_font
        ws[f'D{row}'].font = total_font
        ws[f'C{row}'].alignment = Alignment(horizontal='right', vertical='center')
        ws[f'D{row}'].alignment = Alignment(horizontal='center', vertical='center')
        
        for col in ['A', 'B', 'C', 'D']:
            ws[f'{col}{row}'].fill = total_fill
            ws[f'{col}{row}'].border = thin_border
        
        ws.row_dimensions[row].height = 29
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è A4 —Ñ–æ—Ä–º–∞—Ç–∞
        ws.column_dimensions['A'].width = 6      # –ù–æ–º–µ—Ä
        ws.column_dimensions['B'].width = 65     # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        ws.column_dimensions['C'].width = 10     # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        ws.column_dimensions['D'].width = 12     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—á–∞—Ç–∏
        ws.print_options.horizontalCentered = False
        ws.print_options.verticalCentered = False
        
        # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        ws.print_title_rows = f'1:{start_data_row-1}'
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"zakaz_{timestamp}.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫–µ temp
        temp_dir = tempfile.gettempdir()
        filepath = os.path.join(temp_dir, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        wb.save(filepath)
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        return filepath, filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return None, None

def print_excel_file(filepath, printer_name):
    """–ü–µ—á–∞—Ç—å Excel —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä"""
    try:
        if sys.platform != "win32":
            print("‚ùå –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")
            return False
        
        import win32print
        import win32api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        printers = [printer[2] for printer in win32print.EnumPrinters(2)]
        print(f"üñ®Ô∏è  Sistemadagi barcha printerlar:")
        for idx, p in enumerate(printers, 1):
            print(f"     {idx}. {p}")
        
        print(f"\nüéØ Kerakli printer: '{printer_name}'")
        
        if printer_name not in printers:
            print(f"‚ö†Ô∏è  OGOHLANTIRISH: Printer '{printer_name}' topilmadi!")
            print(f"   Mavjud printerlar ichidan qidirilmoqda...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä
            found = False
            for p in printers:
                if printer_name.lower() in p.lower() or p.lower() in printer_name.lower():
                    print(f"   ‚úÖ O'xshash printer topildi: {p}")
                    printer_name = p
                    found = True
                    break
            
            if not found:
                default = win32print.GetDefaultPrinter()
                print(f"   ‚ö†Ô∏è  O'xshash printer topilmadi!")
                print(f"   üîÑ Default printerga o'tkazilmoqda: {default}")
                printer_name = default
        else:
            print(f"‚úÖ Printer topildi va tanlandi: {printer_name}")
        
        # USUL 1: Default printerni vaqtincha o'zgartirish
        print(f"\nüîÑ USUL 1: Default printerni vaqtincha o'zgartirish...")
        
        # Hozirgi default printerni saqlash
        original_default = win32print.GetDefaultPrinter()
        print(f"   - Hozirgi default: {original_default}")
        
        try:
            # Yangi printerni default qilish
            win32print.SetDefaultPrinter(printer_name)
            print(f"   - Yangi default o'rnatildi: {printer_name}")
            
            # Excel orqali chop etish (agar Excel mavjud bo'lsa)
            print(f"\nüì§ Chop etish...")
            print(f"   - Fayl: {filepath}")
            print(f"   - Printer: {printer_name}")
            
            excel_success = False
            try:
                import win32com.client
                
                print(f"   ‚úì Excel orqali chop etish...")
                excel = win32com.client.Dispatch("Excel.Application")
                excel.Visible = False
                excel.DisplayAlerts = False
                
                wb = excel.Workbooks.Open(filepath)
                wb.PrintOut(Copies=1, Collate=True)
                wb.Close(False)
                excel.Quit()
                
                excel_success = True
                print(f"   ‚úÖ Excel orqali chop etildi!")
                
            except Exception as excel_error:
                print(f"   ‚ö†Ô∏è  Excel usuli ishlamadi: {excel_error}")
                print(f"   ‚úì Standart usul bilan urinilmoqda...")
                
                # Standart usul
                win32api.ShellExecute(
                    0,
                    "print",
                    filepath,
                    None,
                    ".",
                    0
                )
                print(f"   ‚úÖ Standart usul bilan yuborildi!")
            
            # Biroz kutish (chop etish jarayoni uchun)
            import time
            time.sleep(2)
            
        finally:
            # Default printerni qaytarish
            print(f"\nüîÑ Default printerni qaytarish: {original_default}")
            win32print.SetDefaultPrinter(original_default)
            print(f"   ‚úÖ Default printer qaytarildi")
        
        print(f"\n‚úÖ Chop etish jarayoni tugallandi!")
        return True
            
    except ImportError as ie:
        print(f"‚ùå XATO: Kutubxona topilmadi: {ie}")
        print("üí° O'rnatish: pip install pywin32")
        return False
    except Exception as e:
        print(f"‚ùå XATO: Chop etishda xatolik: {e}")
        import traceback
        print("üìã Batafsil xatolik:")
        traceback.print_exc()
        
        # Default printerni qaytarishga harakat
        try:
            if 'original_default' in locals():
                win32print.SetDefaultPrinter(original_default)
                print(f"üîÑ Default printer qaytarildi (xato bo'lishiga qaramay)")
        except:
            pass
        
        return False

@app.route('/', methods=['GET'])
def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return jsonify({
        "name": "Excel Print Server",
        "version": "2.3",
        "status": "–†–∞–±–æ—Ç–∞–µ—Ç",
        "description": "–°–æ–∑–¥–∞–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
        "printers": PRINTERS,
        "features": [
            "–°–æ–∑–¥–∞–Ω–∏–µ Excel (.xlsx) —Ñ–∞–π–ª–æ–≤",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã",
            "A4 –ø–µ—á–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (type)",
            "–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
            "–ü–µ—á–∞—Ç—å",
            "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
            "Double —á–∏—Å–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "endpoints": {
            "POST /print": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—á–∞—Ç—å Excel",
            "POST /excel": "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Excel (–¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)",
            "GET /printers": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤",
            "GET /": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"
        },
        "example": {
            "url": "/print",
            "method": "POST",
            "body": {
                "printer": 8001,
                "username": "John Doe",
                "order_id": "25-09-12-10",
                "filial": "–¢–∞—à–∫–µ–Ω—Ç",
                "category": "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
                "items": [
                    {
                        "product_id": 90,
                        "name": "–ö–æ—Ä—Ç–æ—à–∫–∞ –æ–ª–ª–∞–¥–∏",
                        "count": 4.5,
                        "type": "—à—Ç"
                    }
                ]
            }
        }
    })

@app.route('/printers', methods=['GET'])
def api_list_printers():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        if sys.platform == "win32":
            import win32print
            printers = [printer[2] for printer in win32print.EnumPrinters(2)]
            default_printer = win32print.GetDefaultPrinter()
            
            return jsonify({
                "available_printers": printers,
                "default_printer": default_printer,
                "configured_printers": PRINTERS
            })
        else:
            return jsonify({
                "error": "–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows",
                "configured_printers": PRINTERS
            })
    except ImportError:
        return jsonify({
            "error": "pywin32 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            "configured_printers": PRINTERS
        })
    except Exception as e:
        return jsonify({
            "error": str(e),
            "configured_printers": PRINTERS
        })

@app.route('/print', methods=['POST'])
def api_print():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—á–∞—Ç—å Excel"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã JSON –¥–∞–Ω–Ω—ã–µ"}), 400
        
        # ========== LOGGING: Kelgan ma'lumotlar ==========
        print("\n" + "="*60)
        print("üì• YANGI SO'ROV KELDI - /print endpoint")
        print("="*60)
        print(f"üì¶ Kelgan JSON data:")
        import json
        print(json.dumps(data, indent=2, ensure_ascii=False))
        print("-"*60)
        
        printer_key = data.get('printer', 1)
        items = data.get('items', [])
        username = data.get('username')
        filial = data.get('filial')
        order_id = data.get('order_id')
        category = data.get('category')
        
        # ========== LOGGING: Printer ma'lumotlari ==========
        print(f"üñ®Ô∏è  PRINTER MA'LUMOTLARI:")
        print(f"   - Kelgan printer key: {printer_key} (Type: {type(printer_key)})")
        print(f"   - Mavjud printer keys: {list(PRINTERS.keys())}")
        print(f"   - Printer key mavjudmi? {printer_key in PRINTERS}")
        
        if not items:
            print("‚ùå XATO: Mahsulotlar ro'yxati bo'sh!")
            return jsonify({"error": "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç"}), 400
        
        if printer_key not in PRINTERS:
            print(f"‚ùå XATO: Printer {printer_key} topilmadi!")
            return jsonify({"error": f"–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(PRINTERS.keys())}"}), 400
        
        printer_name = PRINTERS[printer_key]
        print(f"   - Tanlangan printer nomi: {printer_name}")
        print("-"*60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        print(f"üìÑ Excel fayl yaratilmoqda...")
        print(f"   - Order ID: {order_id}")
        print(f"   - Kategoriya: {category}")
        print(f"   - Mahsulotlar soni: {len(items)}")
        filepath, filename = create_excel_file(items, username, filial, order_id, category)
        if not filepath:
            print("‚ùå XATO: Excel fayl yaratilmadi!")
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel"}), 500
        
        print(f"‚úÖ Excel fayl yaratildi: {filename}")
        print(f"   - Fayl yo'li: {filepath}")
        print("-"*60)
        
        # –ü–µ—á–∞—Ç—å
        print(f"üñ®Ô∏è  CHOP ETISH BOSHLANDI:")
        print(f"   - Printer: {printer_name} (Key: {printer_key})")
        print_success = print_excel_file(filepath, printer_name)
        
        if print_success:
            print(f"‚úÖ MUVAFFAQIYAT: Chop etish tayyor!")
        else:
            print(f"‚ö†Ô∏è  OGOHLANTIRISH: Chop etishda muammo!")
        print("="*60 + "\n")
        
        response = {
            "success": True,
            "message": f"Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {printer_name}",
            "filename": filename,
            "printer": printer_name,
            "printer_key": printer_key,
            "items_count": len(items),
            "total_quantity": sum(float(item.get('count', 0)) if item.get('count') else 0 for item in items),
            "print_status": "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if print_success else "–æ—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏",
            "file_path": filepath,
            "order_id": order_id,
            "category": category
        }
        
        return jsonify(response)
        
    except Exception as e:
        import traceback
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞: {str(e)}",
            "traceback": traceback.format_exc()
        }), 500

@app.route('/excel', methods=['POST'])
def api_excel_only():
    """–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Excel (–¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã JSON –¥–∞–Ω–Ω—ã–µ"}), 400
        
        items = data.get('items', [])
        username = data.get('username')
        filial = data.get('filial')
        order_id = data.get('order_id')
        category = data.get('category')
        
        if not items:
            return jsonify({"error": "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç"}), 400
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        filepath, filename = create_excel_file(items, username, filial, order_id, category)
        if not filepath:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel"}), 500
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return send_file(
            filepath,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route('/test', methods=['GET'])
def api_test():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel"""
    test_items = [
        {
            "product_id": 90,
            "name": "–ö–æ—Ä—Ç–æ—à–∫–∞ –æ–ª–ª–∞–¥–∏",
            "count": 4.5,
            "type": "—à—Ç"
        },
        {
            "product_id": 91,
            "name": "–ú–æ–ª–æ–∫–æ —Å–≤–µ–∂–µ–µ",
            "count": 2.75,
            "type": "–ª"
        },
        {
            "product_id": 92,
            "name": "–•–ª–µ–± –±–µ–ª—ã–π",
            "count": 3.25,
            "type": "—à—Ç"
        },
        {
            "product_id": 93,
            "name": "–°–∞—Ö–∞—Ä",
            "count": 1.5,
            "type": "–∫–≥"
        },
        {
            "product_id": 94,
            "name": "–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ",
            "count": 1.2,
            "type": "–ª"
        }
    ]
    
    filepath, filename = create_excel_file(
        test_items, 
        "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
        "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª", 
        "TEST-001",
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"
    )
    
    if filepath:
        return send_file(
            filepath,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    else:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π Excel"}), 500

if __name__ == '__main__':
    print("=== EXCEL PRINT SERVER (FIXED PRINTER SELECTION) ===")
    print("URL: http://localhost:2020")
    print("–¢–µ—Å—Ç–æ–≤—ã–π Excel: http://localhost:2020/test")
    print("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: http://localhost:2020/printers")
    print("–ü—Ä–∏–Ω—Ç–µ—Ä—ã:", list(PRINTERS.keys()))
    print("Excel –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: openpyxl")
    print("–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞, Type/Unit support")
    print("Ctrl+C - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
    print("=====================================================")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import openpyxl
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install openpyxl")
    
    try:
        import win32print
        import win32api
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pywin32 –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
        printers = [printer[2] for printer in win32print.EnumPrinters(2)]
        default = win32print.GetDefaultPrinter()
        print(f"üñ®Ô∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:")
        for p in printers:
            marker = " (DEFAULT)" if p == default else ""
            print(f"   - {p}{marker}")
    except ImportError:
        print("‚ö†Ô∏è  –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pywin32 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install pywin32")
        print("   –ë–µ–∑ —ç—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–µ—á–∞—Ç—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    app.run(host='0.0.0.0', port=2020, debug=False)